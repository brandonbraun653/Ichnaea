// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: sim_intf.proto

#include "sim_intf.pb.h"
#include "sim_intf.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace sim {

static const char* EnvironmentSpoofer_method_names[] = {
  "/sim.EnvironmentSpoofer/ApplyResistiveLoad",
  "/sim.EnvironmentSpoofer/SetSolarOCV",
  "/sim.EnvironmentSpoofer/SetBoard12VRail",
  "/sim.EnvironmentSpoofer/SetBoard5VRail",
  "/sim.EnvironmentSpoofer/SetBoard3V3Rail",
  "/sim.EnvironmentSpoofer/SetBoard1V1Rail",
  "/sim.EnvironmentSpoofer/SetBoardTemperature",
  "/sim.EnvironmentSpoofer/SetBoardFanSpeed",
  "/sim.EnvironmentSpoofer/SetOutputVoltage",
};

std::unique_ptr< EnvironmentSpoofer::Stub> EnvironmentSpoofer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< EnvironmentSpoofer::Stub> stub(new EnvironmentSpoofer::Stub(channel, options));
  return stub;
}

EnvironmentSpoofer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ApplyResistiveLoad_(EnvironmentSpoofer_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSolarOCV_(EnvironmentSpoofer_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoard12VRail_(EnvironmentSpoofer_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoard5VRail_(EnvironmentSpoofer_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoard3V3Rail_(EnvironmentSpoofer_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoard1V1Rail_(EnvironmentSpoofer_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoardTemperature_(EnvironmentSpoofer_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetBoardFanSpeed_(EnvironmentSpoofer_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetOutputVoltage_(EnvironmentSpoofer_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status EnvironmentSpoofer::Stub::ApplyResistiveLoad(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ApplyResistiveLoad_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::ApplyResistiveLoad(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyResistiveLoad_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::ApplyResistiveLoad(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ApplyResistiveLoad_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncApplyResistiveLoadRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ApplyResistiveLoad_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncApplyResistiveLoadRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncApplyResistiveLoadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetSolarOCV(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSolarOCV_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetSolarOCV(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSolarOCV_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetSolarOCV(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSolarOCV_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetSolarOCVRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSolarOCV_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetSolarOCVRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetSolarOCVRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetBoard12VRail(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoard12VRail_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetBoard12VRail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard12VRail_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetBoard12VRail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard12VRail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetBoard12VRailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoard12VRail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetBoard12VRailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoard12VRailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetBoard5VRail(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoard5VRail_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetBoard5VRail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard5VRail_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetBoard5VRail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard5VRail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetBoard5VRailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoard5VRail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetBoard5VRailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoard5VRailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetBoard3V3Rail(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoard3V3Rail_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetBoard3V3Rail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard3V3Rail_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetBoard3V3Rail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard3V3Rail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetBoard3V3RailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoard3V3Rail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetBoard3V3RailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoard3V3RailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetBoard1V1Rail(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoard1V1Rail_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetBoard1V1Rail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard1V1Rail_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetBoard1V1Rail(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoard1V1Rail_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetBoard1V1RailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoard1V1Rail_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetBoard1V1RailRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoard1V1RailRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetBoardTemperature(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoardTemperature_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetBoardTemperature(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoardTemperature_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetBoardTemperature(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoardTemperature_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetBoardTemperatureRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoardTemperature_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetBoardTemperatureRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoardTemperatureRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetBoardFanSpeed(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetBoardFanSpeed_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetBoardFanSpeed(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoardFanSpeed_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetBoardFanSpeed(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetBoardFanSpeed_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetBoardFanSpeedRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetBoardFanSpeed_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetBoardFanSpeedRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetBoardFanSpeedRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status EnvironmentSpoofer::Stub::SetOutputVoltage(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetOutputVoltage_, context, request, response);
}

void EnvironmentSpoofer::Stub::async::SetOutputVoltage(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOutputVoltage_, context, request, response, std::move(f));
}

void EnvironmentSpoofer::Stub::async::SetOutputVoltage(::grpc::ClientContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetOutputVoltage_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::PrepareAsyncSetOutputVoltageRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::sim::FloatingPointValue, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetOutputVoltage_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* EnvironmentSpoofer::Stub::AsyncSetOutputVoltageRaw(::grpc::ClientContext* context, const ::sim::FloatingPointValue& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetOutputVoltageRaw(context, request, cq);
  result->StartCall();
  return result;
}

EnvironmentSpoofer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->ApplyResistiveLoad(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetSolarOCV(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBoard12VRail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBoard5VRail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBoard3V3Rail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBoard1V1Rail(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBoardTemperature(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetBoardFanSpeed(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      EnvironmentSpoofer_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< EnvironmentSpoofer::Service, ::sim::FloatingPointValue, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](EnvironmentSpoofer::Service* service,
             ::grpc::ServerContext* ctx,
             const ::sim::FloatingPointValue* req,
             ::google::protobuf::Empty* resp) {
               return service->SetOutputVoltage(ctx, req, resp);
             }, this)));
}

EnvironmentSpoofer::Service::~Service() {
}

::grpc::Status EnvironmentSpoofer::Service::ApplyResistiveLoad(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetSolarOCV(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetBoard12VRail(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetBoard5VRail(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetBoard3V3Rail(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetBoard1V1Rail(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetBoardTemperature(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetBoardFanSpeed(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status EnvironmentSpoofer::Service::SetOutputVoltage(::grpc::ServerContext* context, const ::sim::FloatingPointValue* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace sim

