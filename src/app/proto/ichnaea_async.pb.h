/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_ICHNAEA_ICHNAEA_ASYNC_PB_H_INCLUDED
#define PB_ICHNAEA_ICHNAEA_ASYNC_PB_H_INCLUDED
#include <pb.h>
#include "mbed_rpc.pb.h"

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Asynchronous messages that can be sent between nodes in the network and are not RPCs. Usually this is
 for system health monitoring and other non-critical messages occurring in the background. These messages
 start at 500 to avoid conflicts with the mbed_rpc.proto messages and ichnaea_rpc.proto messages. */
typedef enum _ichnaea_AsyncMessageId {
    ichnaea_AsyncMessageId_MSG_HEARTBEAT = 200
} ichnaea_AsyncMessageId;

typedef enum _ichnaea_AsyncMessageVersion {
    /* option allow_alias = true; */
    ichnaea_AsyncMessageVersion_MSG_VER_HEARTBEAT = 0
} ichnaea_AsyncMessageVersion;

/* Struct definitions */
/* MSG_HEARTBEAT */
typedef struct _ichnaea_Heartbeat {
    mbed_rpc_Header header;
    uint32_t boot_count;
    uint32_t node_id;
    uint32_t timestamp;
} ichnaea_Heartbeat;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ichnaea_AsyncMessageId_MIN ichnaea_AsyncMessageId_MSG_HEARTBEAT
#define _ichnaea_AsyncMessageId_MAX ichnaea_AsyncMessageId_MSG_HEARTBEAT
#define _ichnaea_AsyncMessageId_ARRAYSIZE ((ichnaea_AsyncMessageId)(ichnaea_AsyncMessageId_MSG_HEARTBEAT+1))

#define _ichnaea_AsyncMessageVersion_MIN ichnaea_AsyncMessageVersion_MSG_VER_HEARTBEAT
#define _ichnaea_AsyncMessageVersion_MAX ichnaea_AsyncMessageVersion_MSG_VER_HEARTBEAT
#define _ichnaea_AsyncMessageVersion_ARRAYSIZE ((ichnaea_AsyncMessageVersion)(ichnaea_AsyncMessageVersion_MSG_VER_HEARTBEAT+1))



/* Initializer values for message structs */
#define ichnaea_Heartbeat_init_default           {mbed_rpc_Header_init_default, 0, 0, 0}
#define ichnaea_Heartbeat_init_zero              {mbed_rpc_Header_init_zero, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ichnaea_Heartbeat_header_tag             1
#define ichnaea_Heartbeat_boot_count_tag         2
#define ichnaea_Heartbeat_node_id_tag            3
#define ichnaea_Heartbeat_timestamp_tag          4

/* Struct field encoding specification for nanopb */
#define ichnaea_Heartbeat_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, MESSAGE,  header,            1) \
X(a, STATIC,   REQUIRED, UINT32,   boot_count,        2) \
X(a, STATIC,   REQUIRED, UINT32,   node_id,           3) \
X(a, STATIC,   REQUIRED, UINT32,   timestamp,         4)
#define ichnaea_Heartbeat_CALLBACK NULL
#define ichnaea_Heartbeat_DEFAULT NULL
#define ichnaea_Heartbeat_header_MSGTYPE mbed_rpc_Header

extern const pb_msgdesc_t ichnaea_Heartbeat_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ichnaea_Heartbeat_fields &ichnaea_Heartbeat_msg

/* Maximum encoded size of messages (where known) */
#define ICHNAEA_ICHNAEA_ASYNC_PB_H_MAX_SIZE      ichnaea_Heartbeat_size
#define ichnaea_Heartbeat_size                   32

#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef __cplusplus
/* Message descriptors for nanopb */
namespace nanopb {
template <>
struct MessageDescriptor<ichnaea_Heartbeat> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 4;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_Heartbeat_msg;
    }
};
}  // namespace nanopb

#endif  /* __cplusplus */


#endif
