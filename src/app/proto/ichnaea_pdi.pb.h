/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_ICHNAEA_ICHNAEA_PDI_PB_H_INCLUDED
#define PB_ICHNAEA_ICHNAEA_PDI_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* PDI data that can be read from the node
 ** DO NOT CHANGE THE VALUE OF THE ENUMERATION ONCE SET ** */
typedef enum _ichnaea_PDI_ID {
    /* System information */
    ichnaea_PDI_ID_BOOT_COUNT = 0, /* Number of times the system has booted */
    ichnaea_PDI_ID_SERIAL_NUMBER = 1, /* Unique serial number of the system */
    ichnaea_PDI_ID_MFG_DATE = 2, /* Date the system was manufactured */
    ichnaea_PDI_ID_CAL_DATE = 3, /* Date the system was last calibrated */
    /* Power system configuration data */
    ichnaea_PDI_ID_TARGET_SYSTEM_VOLTAGE_OUTPUT = 25, /* Requested voltage target (lower than rated limit) */
    ichnaea_PDI_ID_CONFIG_SYSTEM_VOLTAGE_OUTPUT_RATED_LIMIT = 26, /* Maximum rated voltage the system can produce */
    ichnaea_PDI_ID_TARGET_SYSTEM_CURRENT_OUTPUT = 27, /* Requested max current output (lower than rated limit) */
    ichnaea_PDI_ID_CONFIG_SYSTEM_CURRENT_OUTPUT_RATED_LIMIT = 28, /* Maximum rated current that may be drawn from the whole system */
    ichnaea_PDI_ID_TARGET_PHASE_CURRENT_OUTPUT = 29, /* Requested max phase current output (lower than rated limit) */
    ichnaea_PDI_ID_CONFIG_PHASE_CURRENT_OUTPUT_RATED_LIMIT = 30, /* Maximum rated current that may be drawn from a single phase */
    ichnaea_PDI_ID_CONFIG_MIN_SYSTEM_VOLTAGE_INPUT = 31, /* Minimum voltage that the system will operate at (below this, the system will shut down) */
    ichnaea_PDI_ID_CONFIG_MIN_SYSTEM_VOLTAGE_INPUT_RATED_LIMIT = 32, /* Hard limit voltage at which the system will shut down */
    ichnaea_PDI_ID_CONFIG_MAX_SYSTEM_VOLTAGE_INPUT = 33, /* Maximum voltage that the system will operate at (above this, the system will shut down) */
    ichnaea_PDI_ID_CONFIG_MAX_SYSTEM_VOLTAGE_INPUT_RATED_LIMIT = 34, /* Hard limit voltage at which the system will shut down */
    ichnaea_PDI_ID_CONFIG_PGOOD_MONITOR_TIMEOUT_MS = 35, /* Time in milliseconds to wait for PGOOD signal to be asserted on power up */
    /* Tunable hardware parameters */
    ichnaea_PDI_ID_CONFIG_LTC_PHASE_INDUCTOR_DCR = 50, /* Inductor DCR value in Ohms */
    /* Misc Configurations */
    ichnaea_PDI_ID_TARGET_FAN_SPEED_RPM = 60, /* Requested fan speed in RPM */
    ichnaea_PDI_ID_CONFIG_MIN_TEMP_LIMIT = 61, /* Minimum temperature limit in degrees Celsius */
    ichnaea_PDI_ID_CONFIG_MAX_TEMP_LIMIT = 62, /* Maximum temperature limit in degrees Celsius */
    /* Monitor parameters */
    ichnaea_PDI_ID_CONFIG_MON_INPUT_VOLTAGE_OOR_ENTRY_DELAY_MS = 80, /* Time in milliseconds to wait before tripping input voltage fault entry */
    ichnaea_PDI_ID_CONFIG_MON_INPUT_VOLTAGE_OOR_EXIT_DELAY_MS = 81, /* Time in milliseconds to wait before tripping input voltage fault exit */
    ichnaea_PDI_ID_CONFIG_MON_LOAD_OVERCURRENT_OOR_ENTRY_DELAY_MS = 82, /* Time in milliseconds to wait before tripping overcurrent fault entry */
    ichnaea_PDI_ID_CONFIG_MON_LOAD_OVERCURRENT_OOR_EXIT_DELAY_MS = 83, /* Time in milliseconds to wait before tripping overcurrent fault exit */
    ichnaea_PDI_ID_CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_LIMIT = 84, /* Percent error limit to trip voltage regulation fault */
    ichnaea_PDI_ID_CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_ENTRY_DELAY_MS = 85, /* Time in milliseconds to wait before tripping voltage regulation fault entry */
    ichnaea_PDI_ID_CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_EXIT_DELAY_MS = 86, /* Time in milliseconds to wait before tripping voltage regulation fault exit */
    ichnaea_PDI_ID_CONFIG_MON_FAN_SPEED_PCT_ERROR_OOR_LIMIT = 87, /* Percent error from target to trip fan speed fault */
    ichnaea_PDI_ID_CONFIG_MON_FAN_SPEED_OOR_ENTRY_DELAY_MS = 88, /* Time in milliseconds to wait before tripping fan speed fault entry */
    ichnaea_PDI_ID_CONFIG_MON_FAN_SPEED_OOR_EXIT_DELAY_MS = 89, /* Time in milliseconds to wait before tripping fan speed fault exit */
    ichnaea_PDI_ID_CONFIG_MON_TEMPERATURE_OOR_ENTRY_DELAY_MS = 90, /* Time in milliseconds to wait before tripping temperature fault entry */
    ichnaea_PDI_ID_CONFIG_MON_TEMPERATURE_OOR_EXIT_DELAY_MS = 91, /* Time in milliseconds to wait before tripping temperature fault exit */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_INPUT_VOLTAGE = 92, /* Filter configuration for input voltage */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_OUTPUT_CURRENT = 93, /* Filter configuration for output current */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_OUTPUT_VOLTAGE = 94, /* Filter configuration for output voltage */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_1V1_VOLTAGE = 95, /* Filter configuration for 1V1 voltage */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_3V3_VOLTAGE = 96, /* Filter configuration for 3V3 voltage */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_5V0_VOLTAGE = 97, /* Filter configuration for 5V0 voltage */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_12V0_VOLTAGE = 98, /* Filter configuration for 12V0 voltage */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_TEMPERATURE = 99, /* Filter configuration for temperature */
    ichnaea_PDI_ID_CONFIG_MON_FILTER_FAN_SPEED = 100, /* Filter configuration for fan speed */
    /* Realtime volatile data */
    ichnaea_PDI_ID_MON_INPUT_VOLTAGE_RAW = 200, /* Raw input voltage to the system */
    ichnaea_PDI_ID_MON_INPUT_VOLTAGE_FILTERED = 201, /* Filtered input voltage to the system */
    ichnaea_PDI_ID_MON_OUTPUT_CURRENT_RAW = 202, /* Raw output current from the system */
    ichnaea_PDI_ID_MON_OUTPUT_CURRENT_FILTERED = 203, /* Filtered output current from the system */
    ichnaea_PDI_ID_MON_OUTPUT_VOLTAGE_RAW = 204, /* Raw output voltage from the system */
    ichnaea_PDI_ID_MON_OUTPUT_VOLTAGE_FILTERED = 205, /* Filtered output voltage from the system */
    ichnaea_PDI_ID_MON_1V1_VOLTAGE_FILTERED = 206, /* Filtered 1V1 voltage from the system */
    ichnaea_PDI_ID_MON_3V3_VOLTAGE_FILTERED = 207, /* Filtered 3V3 voltage from the system */
    ichnaea_PDI_ID_MON_5V0_VOLTAGE_FILTERED = 208, /* Filtered 5V0 voltage from the system */
    ichnaea_PDI_ID_MON_12V0_VOLTAGE_FILTERED = 209, /* Filtered 12V0 voltage from the system */
    ichnaea_PDI_ID_MON_TEMPERATURE_FILTERED = 210, /* Filtered temperature from the system */
    ichnaea_PDI_ID_MON_FAN_SPEED_FILTERED = 211, /* Filtered fan speed from the system */
    ichnaea_PDI_ID_MON_INPUT_VOLTAGE_VALID = 212, /* Validity of input voltage reading */
    ichnaea_PDI_ID_MON_OUTPUT_CURRENT_VALID = 213, /* Validity of output current reading */
    ichnaea_PDI_ID_MON_OUTPUT_VOLTAGE_VALID = 214, /* Validity of output voltage reading */
    ichnaea_PDI_ID_MON_1V1_VOLTAGE_VALID = 215, /* Validity of 1V1 voltage reading */
    ichnaea_PDI_ID_MON_3V3_VOLTAGE_VALID = 216, /* Validity of 3V3 voltage reading */
    ichnaea_PDI_ID_MON_5V0_VOLTAGE_VALID = 217, /* Validity of 5V0 voltage reading */
    ichnaea_PDI_ID_MON_12V0_VOLTAGE_VALID = 218, /* Validity of 12V0 voltage reading */
    ichnaea_PDI_ID_MON_TEMPERATURE_VALID = 219, /* Validity of temperature reading */
    ichnaea_PDI_ID_MON_FAN_SPEED_VALID = 220, /* Validity of fan speed reading */
    /* Calibration data */
    ichnaea_PDI_ID_CONFIG_CAL_OUTPUT_CURRENT = 300 /* Calibration data for output current sensor */
} ichnaea_PDI_ID;

typedef enum _ichnaea_PDI_IIRFilterConfig_MaxFilterOrder {
    ichnaea_PDI_IIRFilterConfig_MaxFilterOrder_MAX_FILTER_ORDER = 6
} ichnaea_PDI_IIRFilterConfig_MaxFilterOrder;

/* Struct definitions */
/* BOOT_COUNT */
typedef struct _ichnaea_PDI_BootCount {
    uint32_t boot_count;
} ichnaea_PDI_BootCount;

/* SERIAL_NUMBER */
typedef struct _ichnaea_PDI_SerialNumber {
    char serial_number[32];
} ichnaea_PDI_SerialNumber;

/* MFG_DATE */
typedef struct _ichnaea_PDI_ManufactureDate {
    uint8_t day;
    uint8_t month;
    uint16_t year;
} ichnaea_PDI_ManufactureDate;

/* CAL_DATE */
typedef struct _ichnaea_PDI_CalibrationDate {
    uint8_t day;
    uint8_t month;
    uint16_t year;
} ichnaea_PDI_CalibrationDate;

typedef struct _ichnaea_PDI_FloatConfiguration {
    float value;
} ichnaea_PDI_FloatConfiguration;

typedef struct _ichnaea_PDI_Uint32Configuration {
    uint32_t value;
} ichnaea_PDI_Uint32Configuration;

typedef struct _ichnaea_PDI_BooleanConfiguration {
    bool value;
} ichnaea_PDI_BooleanConfiguration;

/* Storage for the configuration of a generic IIR filter. It's sized to hold
 the maximum number of coefficients and state values for a filter of order 6.
 Expects implementation using the CMSIS-DSP library biQuad filter.

 Example:
   order = 6
   coefficients = 5*(order/2) = 15

 See: https://github.com/ARM-software/CMSIS-DSP
 See: https://github.com/matteoscordino/iir-designer-cmsis-dsp */
typedef struct _ichnaea_PDI_IIRFilterConfig {
    uint8_t order; /* Filter order (max 6) */
    uint32_t sampleRateMs; /* Sample rate in milliseconds */
    float coefficients[15]; /* Filter coefficients */
} ichnaea_PDI_IIRFilterConfig;

/* Storage for the most basic sensor calibration data. This is a simple offset
 and gain calibration with a valid range, of the form y = m*x + b. */
typedef struct _ichnaea_PDI_BasicCalibration {
    float offset; /* b term in y = m*x + b */
    float gain; /* m term in y = m*x + b */
    float valid_min; /* Minimum valid value for the sensor */
    float valid_max; /* Maximum valid value for the sensor */
} ichnaea_PDI_BasicCalibration;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ichnaea_PDI_ID_MIN ichnaea_PDI_ID_BOOT_COUNT
#define _ichnaea_PDI_ID_MAX ichnaea_PDI_ID_CONFIG_CAL_OUTPUT_CURRENT
#define _ichnaea_PDI_ID_ARRAYSIZE ((ichnaea_PDI_ID)(ichnaea_PDI_ID_CONFIG_CAL_OUTPUT_CURRENT+1))

#define _ichnaea_PDI_IIRFilterConfig_MaxFilterOrder_MIN ichnaea_PDI_IIRFilterConfig_MaxFilterOrder_MAX_FILTER_ORDER
#define _ichnaea_PDI_IIRFilterConfig_MaxFilterOrder_MAX ichnaea_PDI_IIRFilterConfig_MaxFilterOrder_MAX_FILTER_ORDER
#define _ichnaea_PDI_IIRFilterConfig_MaxFilterOrder_ARRAYSIZE ((ichnaea_PDI_IIRFilterConfig_MaxFilterOrder)(ichnaea_PDI_IIRFilterConfig_MaxFilterOrder_MAX_FILTER_ORDER+1))











/* Initializer values for message structs */
#define ichnaea_PDI_BootCount_init_default       {0}
#define ichnaea_PDI_SerialNumber_init_default    {""}
#define ichnaea_PDI_ManufactureDate_init_default {0, 0, 0}
#define ichnaea_PDI_CalibrationDate_init_default {0, 0, 0}
#define ichnaea_PDI_FloatConfiguration_init_default {0}
#define ichnaea_PDI_Uint32Configuration_init_default {0}
#define ichnaea_PDI_BooleanConfiguration_init_default {0}
#define ichnaea_PDI_IIRFilterConfig_init_default {0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define ichnaea_PDI_BasicCalibration_init_default {0, 0, 0, 0}
#define ichnaea_PDI_BootCount_init_zero          {0}
#define ichnaea_PDI_SerialNumber_init_zero       {""}
#define ichnaea_PDI_ManufactureDate_init_zero    {0, 0, 0}
#define ichnaea_PDI_CalibrationDate_init_zero    {0, 0, 0}
#define ichnaea_PDI_FloatConfiguration_init_zero {0}
#define ichnaea_PDI_Uint32Configuration_init_zero {0}
#define ichnaea_PDI_BooleanConfiguration_init_zero {0}
#define ichnaea_PDI_IIRFilterConfig_init_zero    {0, 0, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}}
#define ichnaea_PDI_BasicCalibration_init_zero   {0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define ichnaea_PDI_BootCount_boot_count_tag     1
#define ichnaea_PDI_SerialNumber_serial_number_tag 1
#define ichnaea_PDI_ManufactureDate_day_tag      1
#define ichnaea_PDI_ManufactureDate_month_tag    2
#define ichnaea_PDI_ManufactureDate_year_tag     3
#define ichnaea_PDI_CalibrationDate_day_tag      1
#define ichnaea_PDI_CalibrationDate_month_tag    2
#define ichnaea_PDI_CalibrationDate_year_tag     3
#define ichnaea_PDI_FloatConfiguration_value_tag 1
#define ichnaea_PDI_Uint32Configuration_value_tag 1
#define ichnaea_PDI_BooleanConfiguration_value_tag 1
#define ichnaea_PDI_IIRFilterConfig_order_tag    1
#define ichnaea_PDI_IIRFilterConfig_sampleRateMs_tag 2
#define ichnaea_PDI_IIRFilterConfig_coefficients_tag 3
#define ichnaea_PDI_BasicCalibration_offset_tag  1
#define ichnaea_PDI_BasicCalibration_gain_tag    2
#define ichnaea_PDI_BasicCalibration_valid_min_tag 3
#define ichnaea_PDI_BasicCalibration_valid_max_tag 4

/* Struct field encoding specification for nanopb */
#define ichnaea_PDI_BootCount_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   boot_count,        1)
#define ichnaea_PDI_BootCount_CALLBACK NULL
#define ichnaea_PDI_BootCount_DEFAULT NULL

#define ichnaea_PDI_SerialNumber_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, STRING,   serial_number,     1)
#define ichnaea_PDI_SerialNumber_CALLBACK NULL
#define ichnaea_PDI_SerialNumber_DEFAULT NULL

#define ichnaea_PDI_ManufactureDate_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   day,               1) \
X(a, STATIC,   REQUIRED, UINT32,   month,             2) \
X(a, STATIC,   REQUIRED, UINT32,   year,              3)
#define ichnaea_PDI_ManufactureDate_CALLBACK NULL
#define ichnaea_PDI_ManufactureDate_DEFAULT NULL

#define ichnaea_PDI_CalibrationDate_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   day,               1) \
X(a, STATIC,   REQUIRED, UINT32,   month,             2) \
X(a, STATIC,   REQUIRED, UINT32,   year,              3)
#define ichnaea_PDI_CalibrationDate_CALLBACK NULL
#define ichnaea_PDI_CalibrationDate_DEFAULT NULL

#define ichnaea_PDI_FloatConfiguration_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    value,             1)
#define ichnaea_PDI_FloatConfiguration_CALLBACK NULL
#define ichnaea_PDI_FloatConfiguration_DEFAULT NULL

#define ichnaea_PDI_Uint32Configuration_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   value,             1)
#define ichnaea_PDI_Uint32Configuration_CALLBACK NULL
#define ichnaea_PDI_Uint32Configuration_DEFAULT NULL

#define ichnaea_PDI_BooleanConfiguration_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, BOOL,     value,             1)
#define ichnaea_PDI_BooleanConfiguration_CALLBACK NULL
#define ichnaea_PDI_BooleanConfiguration_DEFAULT NULL

#define ichnaea_PDI_IIRFilterConfig_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   order,             1) \
X(a, STATIC,   REQUIRED, UINT32,   sampleRateMs,      2) \
X(a, STATIC,   FIXARRAY, FLOAT,    coefficients,      3)
#define ichnaea_PDI_IIRFilterConfig_CALLBACK NULL
#define ichnaea_PDI_IIRFilterConfig_DEFAULT NULL

#define ichnaea_PDI_BasicCalibration_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, FLOAT,    offset,            1) \
X(a, STATIC,   REQUIRED, FLOAT,    gain,              2) \
X(a, STATIC,   REQUIRED, FLOAT,    valid_min,         3) \
X(a, STATIC,   REQUIRED, FLOAT,    valid_max,         4)
#define ichnaea_PDI_BasicCalibration_CALLBACK NULL
#define ichnaea_PDI_BasicCalibration_DEFAULT NULL

extern const pb_msgdesc_t ichnaea_PDI_BootCount_msg;
extern const pb_msgdesc_t ichnaea_PDI_SerialNumber_msg;
extern const pb_msgdesc_t ichnaea_PDI_ManufactureDate_msg;
extern const pb_msgdesc_t ichnaea_PDI_CalibrationDate_msg;
extern const pb_msgdesc_t ichnaea_PDI_FloatConfiguration_msg;
extern const pb_msgdesc_t ichnaea_PDI_Uint32Configuration_msg;
extern const pb_msgdesc_t ichnaea_PDI_BooleanConfiguration_msg;
extern const pb_msgdesc_t ichnaea_PDI_IIRFilterConfig_msg;
extern const pb_msgdesc_t ichnaea_PDI_BasicCalibration_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ichnaea_PDI_BootCount_fields &ichnaea_PDI_BootCount_msg
#define ichnaea_PDI_SerialNumber_fields &ichnaea_PDI_SerialNumber_msg
#define ichnaea_PDI_ManufactureDate_fields &ichnaea_PDI_ManufactureDate_msg
#define ichnaea_PDI_CalibrationDate_fields &ichnaea_PDI_CalibrationDate_msg
#define ichnaea_PDI_FloatConfiguration_fields &ichnaea_PDI_FloatConfiguration_msg
#define ichnaea_PDI_Uint32Configuration_fields &ichnaea_PDI_Uint32Configuration_msg
#define ichnaea_PDI_BooleanConfiguration_fields &ichnaea_PDI_BooleanConfiguration_msg
#define ichnaea_PDI_IIRFilterConfig_fields &ichnaea_PDI_IIRFilterConfig_msg
#define ichnaea_PDI_BasicCalibration_fields &ichnaea_PDI_BasicCalibration_msg

/* Maximum encoded size of messages (where known) */
#define ICHNAEA_ICHNAEA_PDI_PB_H_MAX_SIZE        ichnaea_PDI_IIRFilterConfig_size
#define ichnaea_PDI_BasicCalibration_size        20
#define ichnaea_PDI_BooleanConfiguration_size    2
#define ichnaea_PDI_BootCount_size               6
#define ichnaea_PDI_CalibrationDate_size         10
#define ichnaea_PDI_FloatConfiguration_size      5
#define ichnaea_PDI_IIRFilterConfig_size         84
#define ichnaea_PDI_ManufactureDate_size         10
#define ichnaea_PDI_SerialNumber_size            33
#define ichnaea_PDI_Uint32Configuration_size     6

#ifdef __cplusplus
} /* extern "C" */
#endif

#ifdef __cplusplus
/* Message descriptors for nanopb */
namespace nanopb {
template <>
struct MessageDescriptor<ichnaea_PDI_BootCount> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_BootCount_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_SerialNumber> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_SerialNumber_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_ManufactureDate> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 3;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_ManufactureDate_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_CalibrationDate> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 3;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_CalibrationDate_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_FloatConfiguration> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_FloatConfiguration_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_Uint32Configuration> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_Uint32Configuration_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_BooleanConfiguration> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 1;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_BooleanConfiguration_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_IIRFilterConfig> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 3;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_IIRFilterConfig_msg;
    }
};
template <>
struct MessageDescriptor<ichnaea_PDI_BasicCalibration> {
    static PB_INLINE_CONSTEXPR const pb_size_t fields_array_length = 4;
    static inline const pb_msgdesc_t* fields() {
        return &ichnaea_PDI_BasicCalibration_msg;
    }
};
}  // namespace nanopb

#endif  /* __cplusplus */


#endif
