from pathlib import Path
from oct2py import octave
import numpy as np
from typing import List

def design_lowpass_filter(order: int, f1: float, fs: float) -> List[float]:
    """
    Designs a lowpass Butterworth filter and returns the coefficients. This is
    intended to be used with the CMSIS-DSP library.

    Args:
        order: The order of the filter.
        f1: The cutoff frequency of the filter (radians)
        fs: The sampling frequency (radians)

    Returns:
        The filter coefficients as a list of 32-bit floats.
    """
    octave.eval(f"""
    addpath('{Path(__file__).parent.as_posix()}');
    pkg load signal;
    """)
    output = octave.feval('design_iir_lowpass_cmsis_butter', order, f1, fs, False)
    assert isinstance(output, np.ndarray)

    # Convert the (N, 1) array to a list of 32-bit floats
    return [float(output[n][0].astype(np.float32)) for n in range(output.shape[0])]


def format_coefficients_as_c_array(name: str, coefficients: List[float]) -> str:
    """
    Formats the coefficients as a C++ constexpr array.

    Args:
        name: The name of the array.
        coefficients: The coefficients as a list of 32-bit floats.

    Returns:
        The coefficients as a C array.
    """
    return f"""static constexpr size_t DFLT_FLTR_COEFF_{name.upper()}_SIZE = {len(coefficients)};\nstatic constexpr float DFLT_FLTR_COEFF_{name.upper()}_VAL[{len(coefficients)}] = {{ {'f, '.join(map(str, coefficients))} }};"""


def write_hpp_file(path: Path, declarations: List[str]) -> None:
    """
    Writes a C++ header file with the given declarations.

    Args:
      path: The path to the file.
      declarations: The declarations to write.

    Returns:
      None
    """
    with open(path, "w") as f:
        f.write(f"// This code was generated by {Path(__file__).name}. Do not modify.\n")
        f.write("#pragma once\n")
        f.write("#include <cstddef>\n")
        f.write("\n")
        f.write("\n".join(declarations))
        f.write("\n")

