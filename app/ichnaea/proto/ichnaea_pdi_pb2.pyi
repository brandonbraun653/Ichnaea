"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _PDI_ID:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _PDI_IDEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_PDI_ID.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    BOOT_COUNT: _PDI_ID.ValueType  # 0
    """System information
    Number of times the system has booted
    """
    SERIAL_NUMBER: _PDI_ID.ValueType  # 1
    """Unique serial number of the system"""
    MFG_DATE: _PDI_ID.ValueType  # 2
    """Date the system was manufactured"""
    CAL_DATE: _PDI_ID.ValueType  # 3
    """Date the system was last calibrated"""
    TARGET_SYSTEM_VOLTAGE_OUTPUT: _PDI_ID.ValueType  # 25
    """Power system configuration data
    Requested voltage target (lower than rated limit)
    """
    CONFIG_SYSTEM_VOLTAGE_OUTPUT_RATED_LIMIT: _PDI_ID.ValueType  # 26
    """Maximum rated voltage the system can produce"""
    TARGET_SYSTEM_CURRENT_OUTPUT: _PDI_ID.ValueType  # 27
    """Requested max current output (lower than rated limit)"""
    CONFIG_SYSTEM_CURRENT_OUTPUT_RATED_LIMIT: _PDI_ID.ValueType  # 28
    """Maximum rated current that may be drawn from the whole system"""
    TARGET_PHASE_CURRENT_OUTPUT: _PDI_ID.ValueType  # 29
    """Requested max phase current output (lower than rated limit)"""
    CONFIG_PHASE_CURRENT_OUTPUT_RATED_LIMIT: _PDI_ID.ValueType  # 30
    """Maximum rated current that may be drawn from a single phase"""
    CONFIG_MIN_SYSTEM_VOLTAGE_INPUT: _PDI_ID.ValueType  # 31
    """Minimum voltage that the system will operate at (below this, the system will shut down)"""
    CONFIG_MIN_SYSTEM_VOLTAGE_INPUT_RATED_LIMIT: _PDI_ID.ValueType  # 32
    """Hard limit voltage at which the system will shut down"""
    CONFIG_MAX_SYSTEM_VOLTAGE_INPUT: _PDI_ID.ValueType  # 33
    """Maximum voltage that the system will operate at (above this, the system will shut down)"""
    CONFIG_MAX_SYSTEM_VOLTAGE_INPUT_RATED_LIMIT: _PDI_ID.ValueType  # 34
    """Hard limit voltage at which the system will shut down"""
    CONFIG_PGOOD_MONITOR_TIMEOUT_MS: _PDI_ID.ValueType  # 35
    """Time in milliseconds to wait for PGOOD signal to be asserted on power up"""
    CONFIG_LTC_PHASE_INDUCTOR_DCR: _PDI_ID.ValueType  # 50
    """Tunable hardware parameters
    Inductor DCR value in Ohms
    """
    TARGET_FAN_SPEED_RPM: _PDI_ID.ValueType  # 60
    """Misc Configurations
    Requested fan speed in RPM
    """
    CONFIG_MIN_TEMP_LIMIT: _PDI_ID.ValueType  # 61
    """Minimum temperature limit in degrees Celsius"""
    CONFIG_MAX_TEMP_LIMIT: _PDI_ID.ValueType  # 62
    """Maximum temperature limit in degrees Celsius"""
    CONFIG_MON_INPUT_VOLTAGE_OOR_ENTRY_DELAY_MS: _PDI_ID.ValueType  # 80
    """Monitor parameters
    Time in milliseconds to wait before tripping input voltage fault entry
    """
    CONFIG_MON_INPUT_VOLTAGE_OOR_EXIT_DELAY_MS: _PDI_ID.ValueType  # 81
    """Time in milliseconds to wait before tripping input voltage fault exit"""
    CONFIG_MON_LOAD_OVERCURRENT_OOR_ENTRY_DELAY_MS: _PDI_ID.ValueType  # 82
    """Time in milliseconds to wait before tripping overcurrent fault entry"""
    CONFIG_MON_LOAD_OVERCURRENT_OOR_EXIT_DELAY_MS: _PDI_ID.ValueType  # 83
    """Time in milliseconds to wait before tripping overcurrent fault exit"""
    CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_LIMIT: _PDI_ID.ValueType  # 84
    """Percent error limit to trip voltage regulation fault"""
    CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_ENTRY_DELAY_MS: _PDI_ID.ValueType  # 85
    """Time in milliseconds to wait before tripping voltage regulation fault entry"""
    CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_EXIT_DELAY_MS: _PDI_ID.ValueType  # 86
    """Time in milliseconds to wait before tripping voltage regulation fault exit"""
    CONFIG_MON_FAN_SPEED_PCT_ERROR_OOR_LIMIT: _PDI_ID.ValueType  # 87
    """Percent error from target to trip fan speed fault"""
    CONFIG_MON_FAN_SPEED_OOR_ENTRY_DELAY_MS: _PDI_ID.ValueType  # 88
    """Time in milliseconds to wait before tripping fan speed fault entry"""
    CONFIG_MON_FAN_SPEED_OOR_EXIT_DELAY_MS: _PDI_ID.ValueType  # 89
    """Time in milliseconds to wait before tripping fan speed fault exit"""
    CONFIG_MON_TEMPERATURE_OOR_ENTRY_DELAY_MS: _PDI_ID.ValueType  # 90
    """Time in milliseconds to wait before tripping temperature fault entry"""
    CONFIG_MON_TEMPERATURE_OOR_EXIT_DELAY_MS: _PDI_ID.ValueType  # 91
    """Time in milliseconds to wait before tripping temperature fault exit"""
    CONFIG_MON_FILTER_INPUT_VOLTAGE: _PDI_ID.ValueType  # 92
    """Filter configuration for input voltage"""
    CONFIG_MON_FILTER_OUTPUT_CURRENT: _PDI_ID.ValueType  # 93
    """Filter configuration for output current"""
    CONFIG_MON_FILTER_OUTPUT_VOLTAGE: _PDI_ID.ValueType  # 94
    """Filter configuration for output voltage"""
    CONFIG_MON_FILTER_1V1_VOLTAGE: _PDI_ID.ValueType  # 95
    """Filter configuration for 1V1 voltage"""
    CONFIG_MON_FILTER_3V3_VOLTAGE: _PDI_ID.ValueType  # 96
    """Filter configuration for 3V3 voltage"""
    CONFIG_MON_FILTER_5V0_VOLTAGE: _PDI_ID.ValueType  # 97
    """Filter configuration for 5V0 voltage"""
    CONFIG_MON_FILTER_12V0_VOLTAGE: _PDI_ID.ValueType  # 98
    """Filter configuration for 12V0 voltage"""
    CONFIG_MON_FILTER_TEMPERATURE: _PDI_ID.ValueType  # 99
    """Filter configuration for temperature"""
    CONFIG_MON_FILTER_FAN_SPEED: _PDI_ID.ValueType  # 100
    """Filter configuration for fan speed"""
    MON_INPUT_VOLTAGE_RAW: _PDI_ID.ValueType  # 200
    """Realtime volatile data
    Raw input voltage to the system
    """
    MON_INPUT_VOLTAGE_FILTERED: _PDI_ID.ValueType  # 201
    """Filtered input voltage to the system"""
    MON_OUTPUT_CURRENT_RAW: _PDI_ID.ValueType  # 202
    """Raw output current from the system"""
    MON_OUTPUT_CURRENT_FILTERED: _PDI_ID.ValueType  # 203
    """Filtered output current from the system"""
    MON_OUTPUT_VOLTAGE_RAW: _PDI_ID.ValueType  # 204
    """Raw output voltage from the system"""
    MON_OUTPUT_VOLTAGE_FILTERED: _PDI_ID.ValueType  # 205
    """Filtered output voltage from the system"""
    MON_1V1_VOLTAGE_FILTERED: _PDI_ID.ValueType  # 206
    """Filtered 1V1 voltage from the system"""
    MON_3V3_VOLTAGE_FILTERED: _PDI_ID.ValueType  # 207
    """Filtered 3V3 voltage from the system"""
    MON_5V0_VOLTAGE_FILTERED: _PDI_ID.ValueType  # 208
    """Filtered 5V0 voltage from the system"""
    MON_12V0_VOLTAGE_FILTERED: _PDI_ID.ValueType  # 209
    """Filtered 12V0 voltage from the system"""
    MON_TEMPERATURE_FILTERED: _PDI_ID.ValueType  # 210
    """Filtered temperature from the system"""
    MON_FAN_SPEED_FILTERED: _PDI_ID.ValueType  # 211
    """Filtered fan speed from the system"""
    MON_INPUT_VOLTAGE_VALID: _PDI_ID.ValueType  # 212
    """Validity of input voltage reading"""
    MON_OUTPUT_CURRENT_VALID: _PDI_ID.ValueType  # 213
    """Validity of output current reading"""
    MON_OUTPUT_VOLTAGE_VALID: _PDI_ID.ValueType  # 214
    """Validity of output voltage reading"""
    MON_1V1_VOLTAGE_VALID: _PDI_ID.ValueType  # 215
    """Validity of 1V1 voltage reading"""
    MON_3V3_VOLTAGE_VALID: _PDI_ID.ValueType  # 216
    """Validity of 3V3 voltage reading"""
    MON_5V0_VOLTAGE_VALID: _PDI_ID.ValueType  # 217
    """Validity of 5V0 voltage reading"""
    MON_12V0_VOLTAGE_VALID: _PDI_ID.ValueType  # 218
    """Validity of 12V0 voltage reading"""
    MON_TEMPERATURE_VALID: _PDI_ID.ValueType  # 219
    """Validity of temperature reading"""
    MON_FAN_SPEED_VALID: _PDI_ID.ValueType  # 220
    """Validity of fan speed reading"""
    CONFIG_CAL_OUTPUT_CURRENT: _PDI_ID.ValueType  # 300
    """Calibration data
    Calibration data for output current sensor
    """

class PDI_ID(_PDI_ID, metaclass=_PDI_IDEnumTypeWrapper):
    """PDI data that can be read from the node
    ** DO NOT CHANGE THE VALUE OF THE ENUMERATION ONCE SET **
    """

BOOT_COUNT: PDI_ID.ValueType  # 0
"""System information
Number of times the system has booted
"""
SERIAL_NUMBER: PDI_ID.ValueType  # 1
"""Unique serial number of the system"""
MFG_DATE: PDI_ID.ValueType  # 2
"""Date the system was manufactured"""
CAL_DATE: PDI_ID.ValueType  # 3
"""Date the system was last calibrated"""
TARGET_SYSTEM_VOLTAGE_OUTPUT: PDI_ID.ValueType  # 25
"""Power system configuration data
Requested voltage target (lower than rated limit)
"""
CONFIG_SYSTEM_VOLTAGE_OUTPUT_RATED_LIMIT: PDI_ID.ValueType  # 26
"""Maximum rated voltage the system can produce"""
TARGET_SYSTEM_CURRENT_OUTPUT: PDI_ID.ValueType  # 27
"""Requested max current output (lower than rated limit)"""
CONFIG_SYSTEM_CURRENT_OUTPUT_RATED_LIMIT: PDI_ID.ValueType  # 28
"""Maximum rated current that may be drawn from the whole system"""
TARGET_PHASE_CURRENT_OUTPUT: PDI_ID.ValueType  # 29
"""Requested max phase current output (lower than rated limit)"""
CONFIG_PHASE_CURRENT_OUTPUT_RATED_LIMIT: PDI_ID.ValueType  # 30
"""Maximum rated current that may be drawn from a single phase"""
CONFIG_MIN_SYSTEM_VOLTAGE_INPUT: PDI_ID.ValueType  # 31
"""Minimum voltage that the system will operate at (below this, the system will shut down)"""
CONFIG_MIN_SYSTEM_VOLTAGE_INPUT_RATED_LIMIT: PDI_ID.ValueType  # 32
"""Hard limit voltage at which the system will shut down"""
CONFIG_MAX_SYSTEM_VOLTAGE_INPUT: PDI_ID.ValueType  # 33
"""Maximum voltage that the system will operate at (above this, the system will shut down)"""
CONFIG_MAX_SYSTEM_VOLTAGE_INPUT_RATED_LIMIT: PDI_ID.ValueType  # 34
"""Hard limit voltage at which the system will shut down"""
CONFIG_PGOOD_MONITOR_TIMEOUT_MS: PDI_ID.ValueType  # 35
"""Time in milliseconds to wait for PGOOD signal to be asserted on power up"""
CONFIG_LTC_PHASE_INDUCTOR_DCR: PDI_ID.ValueType  # 50
"""Tunable hardware parameters
Inductor DCR value in Ohms
"""
TARGET_FAN_SPEED_RPM: PDI_ID.ValueType  # 60
"""Misc Configurations
Requested fan speed in RPM
"""
CONFIG_MIN_TEMP_LIMIT: PDI_ID.ValueType  # 61
"""Minimum temperature limit in degrees Celsius"""
CONFIG_MAX_TEMP_LIMIT: PDI_ID.ValueType  # 62
"""Maximum temperature limit in degrees Celsius"""
CONFIG_MON_INPUT_VOLTAGE_OOR_ENTRY_DELAY_MS: PDI_ID.ValueType  # 80
"""Monitor parameters
Time in milliseconds to wait before tripping input voltage fault entry
"""
CONFIG_MON_INPUT_VOLTAGE_OOR_EXIT_DELAY_MS: PDI_ID.ValueType  # 81
"""Time in milliseconds to wait before tripping input voltage fault exit"""
CONFIG_MON_LOAD_OVERCURRENT_OOR_ENTRY_DELAY_MS: PDI_ID.ValueType  # 82
"""Time in milliseconds to wait before tripping overcurrent fault entry"""
CONFIG_MON_LOAD_OVERCURRENT_OOR_EXIT_DELAY_MS: PDI_ID.ValueType  # 83
"""Time in milliseconds to wait before tripping overcurrent fault exit"""
CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_LIMIT: PDI_ID.ValueType  # 84
"""Percent error limit to trip voltage regulation fault"""
CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_ENTRY_DELAY_MS: PDI_ID.ValueType  # 85
"""Time in milliseconds to wait before tripping voltage regulation fault entry"""
CONFIG_MON_LOAD_VOLTAGE_PCT_ERROR_OOR_EXIT_DELAY_MS: PDI_ID.ValueType  # 86
"""Time in milliseconds to wait before tripping voltage regulation fault exit"""
CONFIG_MON_FAN_SPEED_PCT_ERROR_OOR_LIMIT: PDI_ID.ValueType  # 87
"""Percent error from target to trip fan speed fault"""
CONFIG_MON_FAN_SPEED_OOR_ENTRY_DELAY_MS: PDI_ID.ValueType  # 88
"""Time in milliseconds to wait before tripping fan speed fault entry"""
CONFIG_MON_FAN_SPEED_OOR_EXIT_DELAY_MS: PDI_ID.ValueType  # 89
"""Time in milliseconds to wait before tripping fan speed fault exit"""
CONFIG_MON_TEMPERATURE_OOR_ENTRY_DELAY_MS: PDI_ID.ValueType  # 90
"""Time in milliseconds to wait before tripping temperature fault entry"""
CONFIG_MON_TEMPERATURE_OOR_EXIT_DELAY_MS: PDI_ID.ValueType  # 91
"""Time in milliseconds to wait before tripping temperature fault exit"""
CONFIG_MON_FILTER_INPUT_VOLTAGE: PDI_ID.ValueType  # 92
"""Filter configuration for input voltage"""
CONFIG_MON_FILTER_OUTPUT_CURRENT: PDI_ID.ValueType  # 93
"""Filter configuration for output current"""
CONFIG_MON_FILTER_OUTPUT_VOLTAGE: PDI_ID.ValueType  # 94
"""Filter configuration for output voltage"""
CONFIG_MON_FILTER_1V1_VOLTAGE: PDI_ID.ValueType  # 95
"""Filter configuration for 1V1 voltage"""
CONFIG_MON_FILTER_3V3_VOLTAGE: PDI_ID.ValueType  # 96
"""Filter configuration for 3V3 voltage"""
CONFIG_MON_FILTER_5V0_VOLTAGE: PDI_ID.ValueType  # 97
"""Filter configuration for 5V0 voltage"""
CONFIG_MON_FILTER_12V0_VOLTAGE: PDI_ID.ValueType  # 98
"""Filter configuration for 12V0 voltage"""
CONFIG_MON_FILTER_TEMPERATURE: PDI_ID.ValueType  # 99
"""Filter configuration for temperature"""
CONFIG_MON_FILTER_FAN_SPEED: PDI_ID.ValueType  # 100
"""Filter configuration for fan speed"""
MON_INPUT_VOLTAGE_RAW: PDI_ID.ValueType  # 200
"""Realtime volatile data
Raw input voltage to the system
"""
MON_INPUT_VOLTAGE_FILTERED: PDI_ID.ValueType  # 201
"""Filtered input voltage to the system"""
MON_OUTPUT_CURRENT_RAW: PDI_ID.ValueType  # 202
"""Raw output current from the system"""
MON_OUTPUT_CURRENT_FILTERED: PDI_ID.ValueType  # 203
"""Filtered output current from the system"""
MON_OUTPUT_VOLTAGE_RAW: PDI_ID.ValueType  # 204
"""Raw output voltage from the system"""
MON_OUTPUT_VOLTAGE_FILTERED: PDI_ID.ValueType  # 205
"""Filtered output voltage from the system"""
MON_1V1_VOLTAGE_FILTERED: PDI_ID.ValueType  # 206
"""Filtered 1V1 voltage from the system"""
MON_3V3_VOLTAGE_FILTERED: PDI_ID.ValueType  # 207
"""Filtered 3V3 voltage from the system"""
MON_5V0_VOLTAGE_FILTERED: PDI_ID.ValueType  # 208
"""Filtered 5V0 voltage from the system"""
MON_12V0_VOLTAGE_FILTERED: PDI_ID.ValueType  # 209
"""Filtered 12V0 voltage from the system"""
MON_TEMPERATURE_FILTERED: PDI_ID.ValueType  # 210
"""Filtered temperature from the system"""
MON_FAN_SPEED_FILTERED: PDI_ID.ValueType  # 211
"""Filtered fan speed from the system"""
MON_INPUT_VOLTAGE_VALID: PDI_ID.ValueType  # 212
"""Validity of input voltage reading"""
MON_OUTPUT_CURRENT_VALID: PDI_ID.ValueType  # 213
"""Validity of output current reading"""
MON_OUTPUT_VOLTAGE_VALID: PDI_ID.ValueType  # 214
"""Validity of output voltage reading"""
MON_1V1_VOLTAGE_VALID: PDI_ID.ValueType  # 215
"""Validity of 1V1 voltage reading"""
MON_3V3_VOLTAGE_VALID: PDI_ID.ValueType  # 216
"""Validity of 3V3 voltage reading"""
MON_5V0_VOLTAGE_VALID: PDI_ID.ValueType  # 217
"""Validity of 5V0 voltage reading"""
MON_12V0_VOLTAGE_VALID: PDI_ID.ValueType  # 218
"""Validity of 12V0 voltage reading"""
MON_TEMPERATURE_VALID: PDI_ID.ValueType  # 219
"""Validity of temperature reading"""
MON_FAN_SPEED_VALID: PDI_ID.ValueType  # 220
"""Validity of fan speed reading"""
CONFIG_CAL_OUTPUT_CURRENT: PDI_ID.ValueType  # 300
"""Calibration data
Calibration data for output current sensor
"""
global___PDI_ID = PDI_ID

@typing.final
class PDI_BootCount(google.protobuf.message.Message):
    """BOOT_COUNT"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BOOT_COUNT_FIELD_NUMBER: builtins.int
    boot_count: builtins.int
    def __init__(
        self,
        *,
        boot_count: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["boot_count", b"boot_count"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["boot_count", b"boot_count"]) -> None: ...

global___PDI_BootCount = PDI_BootCount

@typing.final
class PDI_SerialNumber(google.protobuf.message.Message):
    """SERIAL_NUMBER"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SERIAL_NUMBER_FIELD_NUMBER: builtins.int
    serial_number: builtins.str
    def __init__(
        self,
        *,
        serial_number: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["serial_number", b"serial_number"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["serial_number", b"serial_number"]) -> None: ...

global___PDI_SerialNumber = PDI_SerialNumber

@typing.final
class PDI_ManufactureDate(google.protobuf.message.Message):
    """MFG_DATE"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DAY_FIELD_NUMBER: builtins.int
    MONTH_FIELD_NUMBER: builtins.int
    YEAR_FIELD_NUMBER: builtins.int
    day: builtins.int
    month: builtins.int
    year: builtins.int
    def __init__(
        self,
        *,
        day: builtins.int | None = ...,
        month: builtins.int | None = ...,
        year: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["day", b"day", "month", b"month", "year", b"year"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["day", b"day", "month", b"month", "year", b"year"]) -> None: ...

global___PDI_ManufactureDate = PDI_ManufactureDate

@typing.final
class PDI_CalibrationDate(google.protobuf.message.Message):
    """CAL_DATE"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DAY_FIELD_NUMBER: builtins.int
    MONTH_FIELD_NUMBER: builtins.int
    YEAR_FIELD_NUMBER: builtins.int
    day: builtins.int
    month: builtins.int
    year: builtins.int
    def __init__(
        self,
        *,
        day: builtins.int | None = ...,
        month: builtins.int | None = ...,
        year: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["day", b"day", "month", b"month", "year", b"year"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["day", b"day", "month", b"month", "year", b"year"]) -> None: ...

global___PDI_CalibrationDate = PDI_CalibrationDate

@typing.final
class PDI_FloatConfiguration(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.float
    def __init__(
        self,
        *,
        value: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___PDI_FloatConfiguration = PDI_FloatConfiguration

@typing.final
class PDI_Uint32Configuration(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.int
    def __init__(
        self,
        *,
        value: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___PDI_Uint32Configuration = PDI_Uint32Configuration

@typing.final
class PDI_BooleanConfiguration(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    value: builtins.bool
    def __init__(
        self,
        *,
        value: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["value", b"value"]) -> None: ...

global___PDI_BooleanConfiguration = PDI_BooleanConfiguration

@typing.final
class PDI_IIRFilterConfig(google.protobuf.message.Message):
    """Storage for the configuration of a generic IIR filter. It's sized to hold
    the maximum number of coefficients and state values for a filter of order 6.
    Expects implementation using the CMSIS-DSP library biQuad filter.

    Example:
      order = 6
      coefficients = 5*(order/2) = 15

    See: https://github.com/ARM-software/CMSIS-DSP
    See: https://github.com/matteoscordino/iir-designer-cmsis-dsp
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _MaxFilterOrder:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _MaxFilterOrderEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[PDI_IIRFilterConfig._MaxFilterOrder.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        MAX_FILTER_ORDER: PDI_IIRFilterConfig._MaxFilterOrder.ValueType  # 6

    class MaxFilterOrder(_MaxFilterOrder, metaclass=_MaxFilterOrderEnumTypeWrapper): ...
    MAX_FILTER_ORDER: PDI_IIRFilterConfig.MaxFilterOrder.ValueType  # 6

    ORDER_FIELD_NUMBER: builtins.int
    SAMPLERATEMS_FIELD_NUMBER: builtins.int
    COEFFICIENTS_FIELD_NUMBER: builtins.int
    order: builtins.int
    """Filter order (max 6)"""
    sampleRateMs: builtins.int
    """Sample rate in milliseconds"""
    @property
    def coefficients(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.float]:
        """Filter coefficients"""

    def __init__(
        self,
        *,
        order: builtins.int | None = ...,
        sampleRateMs: builtins.int | None = ...,
        coefficients: collections.abc.Iterable[builtins.float] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["order", b"order", "sampleRateMs", b"sampleRateMs"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["coefficients", b"coefficients", "order", b"order", "sampleRateMs", b"sampleRateMs"]) -> None: ...

global___PDI_IIRFilterConfig = PDI_IIRFilterConfig

@typing.final
class PDI_BasicCalibration(google.protobuf.message.Message):
    """Storage for the most basic sensor calibration data. This is a simple offset
    and gain calibration with a valid range, of the form y = m*x + b.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OFFSET_FIELD_NUMBER: builtins.int
    GAIN_FIELD_NUMBER: builtins.int
    VALID_MIN_FIELD_NUMBER: builtins.int
    VALID_MAX_FIELD_NUMBER: builtins.int
    offset: builtins.float
    """b term in y = m*x + b"""
    gain: builtins.float
    """m term in y = m*x + b"""
    valid_min: builtins.float
    """Minimum valid value for the sensor"""
    valid_max: builtins.float
    """Maximum valid value for the sensor"""
    def __init__(
        self,
        *,
        offset: builtins.float | None = ...,
        gain: builtins.float | None = ...,
        valid_min: builtins.float | None = ...,
        valid_max: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["gain", b"gain", "offset", b"offset", "valid_max", b"valid_max", "valid_min", b"valid_min"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["gain", b"gain", "offset", b"offset", "valid_max", b"valid_max", "valid_min", b"valid_min"]) -> None: ...

global___PDI_BasicCalibration = PDI_BasicCalibration
