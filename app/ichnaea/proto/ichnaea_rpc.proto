syntax = "proto2";
import "nanopb.proto";
import "mbed_rpc.proto";

package ichnaea;

// System services that are available to all nodes in the network.
enum Service {
  SVC_IDENTITY = 100;      // Get the unique system identifiers
  SVC_SETPOINT = 101;      // Control operational setpoints
  SVC_MANAGER = 102;       // Control system services
  SVC_SENSOR = 103;        // Read sensor values
  SVC_PING_NODE = 104;     // Ping a node to check if it is alive
  SVC_LTC_REG_GET = 105;   // Get a specific register on the LTC7871
  SVC_LTC_REG_SET = 106;   // Set a specific register on the LTC7871
  SVC_PDI_READ = 107;      // Read PDI data from the node
  SVC_PDI_WRITE = 108;     // Write PDI data to the node
  SVC_SYSTEM_STATUS = 109; // Get the system status
}

// Message types available. These start at 100 to avoid conflicts with the
// mbed_rpc.proto messages.
enum Message {
  MSG_GET_ID_REQ = 100;        // Request the unique system identifiers
  MSG_GET_ID_RSP = 101;        // Response to the GetIdRequest message
  MSG_SETPOINT_REQ = 102;      // Request to set operational setpoints
  MSG_SETPOINT_RSP = 103;      // Response to the SetpointRequest message
  MSG_MANAGER_REQ = 104;       // Request to control system services
  MSG_MANAGER_RSP = 105;       // Response to the SystemManagerRequest message
  MSG_SENSOR_REQ = 106;        // Request to read sensor values
  MSG_SENSOR_RSP = 107;        // Response to the SensorObserverRequest message
  MSG_PING_NODE_REQ = 108;     // Request to ping a node
  MSG_PING_NODE_RSP = 109;     // Response to the PingNodeRequest message
  MSG_PDI_READ_REQ = 114;      // Request to read PDI data from the node
  MSG_PDI_READ_RSP = 115;      // Response to the PDI read request
  MSG_PDI_WRITE_REQ = 116;     // Request to write PDI data to the node
  MSG_PDI_WRITE_RSP = 117;     // Response to the PDI write request
  MSG_SYSTEM_STATUS_REQ = 118; // Request the system status
  MSG_SYSTEM_STATUS_RSP = 119; // Response to the GetSysStatusRequest message
}

// Version of the message. This is used to ensure that the message is compatible
// with the receiver.
enum MessageVersion {
  option allow_alias = true;

  MSG_VER_GET_ID_REQ = 0;
  MSG_VER_GET_ID_RSP = 0;
  MSG_VER_SETPOINT_REQ = 0;
  MSG_VER_SETPOINT_RSP = 0;
  MSG_VER_MANAGER_REQ = 0;
  MSG_VER_MANAGER_RSP = 0;
  MSG_VER_SENSOR_REQ = 0;
  MSG_VER_SENSOR_RSP = 0;
  MSG_VER_PING_NODE_REQ = 0;
  MSG_VER_PING_NODE_RSP = 0;
  MSG_VER_PDI_READ_REQ = 0;
  MSG_VER_PDI_READ_RSP = 0;
  MSG_VER_PDI_WRITE_REQ = 0;
  MSG_VER_PDI_WRITE_RSP = 0;
  MSG_VER_SYSTEM_STATUS_REQ = 0;
  MSG_VER_SYSTEM_STATUS_RSP = 0;
}

// ****************************************************************************
// Ping Node Service
// ****************************************************************************

message PingNodeRequest {
  required mbed.rpc.Header header = 1;
  required uint32 node_id = 2;
}

message PingNodeResponse { required mbed.rpc.Header header = 1; }

// ****************************************************************************
// Identity Service
// ****************************************************************************

// This is a broadcasted message to all nodes in the network to respond with
// their unique identifier. This allows a master controller to figure out who is
// in the network for later communication.
message GetIdRequest { required mbed.rpc.Header header = 1; }

// Response to the GetIdRequest message. This contains the unique identifier of
// the node and a software version to help with compatibility decisions.
message GetIdResponse {
  required mbed.rpc.Header header = 1;
  required uint32 unique_id = 2;
  required uint32 ver_major = 3 [ (nanopb).int_size = IS_8 ];
  required uint32 ver_minor = 4 [ (nanopb).int_size = IS_8 ];
  required uint32 ver_patch = 5 [ (nanopb).int_size = IS_8 ];
}

// ****************************************************************************
// System Manager Service
// ****************************************************************************

enum ManagerCommand {
  CMD_REBOOT = 0;           // Reboot the node
  CMD_ENGAGE_OUTPUT = 1;    // Enable power output from the node
  CMD_DISENGAGE_OUTPUT = 2; // Disable power output from the node
  CMD_FLUSH_PDI_CACHE = 3;  // Flush the PDI database
  CMD_ZERO_OUTPUT_CURRENT = 4; // Zero the output current sensor
}

enum ManagerError {
  ERR_CMD_NO_ERROR = 0;
  ERR_CMD_INVALID = 1;
  ERR_CMD_FAILED = 2;
}

message ManagerRequest {
  required mbed.rpc.Header header = 1;
  required uint32 node_id = 2;
  required ManagerCommand command = 3;
}

message ManagerResponse {
  required mbed.rpc.Header header = 1;
  required ManagerError status = 2;
  optional string message = 3 [ (nanopb).max_size = 64 ];
}

// ****************************************************************************
// Setpoint Service
// ****************************************************************************

enum SetpointError {
  ERR_SETPOINT_NO_ERROR = 0;
  ERR_SETPOINT_INVALID = 1;
  ERR_SETPOINT_NOT_SUPPORTED = 2;
}

enum SetpointField {
  SETPOINT_OUTPUT_VOLTAGE = 0; // Regulated output voltage of the node
  SETPOINT_MAX_AVG_OUTPUT_CURRENT =
      1; // Maximum average output current of the node
}

// Control a node's operational setpoints for parameters like voltage, current,
// etc.
message SetpointRequest {
  required mbed.rpc.Header header = 1;
  required uint32 node_id = 2;
  required SetpointField field = 3; // Which field to set
  oneof value_oneof {               // The value to set the field to
    uint32 uint32_type = 4;
    float float_type = 5;
  }
}

message SetpointResponse {
  required mbed.rpc.Header header = 1;
  required SetpointError status = 2;
  optional string message = 3 [ (nanopb).max_size = 64 ];
}

// ****************************************************************************
// Sensor Observer Service
// ****************************************************************************

enum SensorError {
  ERR_SENSOR_NO_ERROR = 0;
  ERR_SENSOR_NOT_SUPPORTED = 1;
  ERR_SENSOR_READ_FAILED = 2;
  ERR_SENSOR_UNKNOWN = 3;
}

enum SensorType {
  SENSOR_OUTPUT_VOLTAGE = 0;
  SENSOR_INPUT_VOLTAGE = 1;
  SENSOR_OUTPUT_CURRENT = 2;
  SENSOR_LTC_AVG_OUTPUT_CURRENT = 3;
  SENSOR_BOARD_TEMP_1 = 4;
  SENSOR_BOARD_TEMP_2 = 5;
  SENSOR_BOARD_TEMP_3 = 6;
  SENSOR_VOLTAGE_MON_1V1 = 7;
  SENSOR_VOLTAGE_MON_3V3 = 8;
  SENSOR_VOLTAGE_MON_5V = 9;
  SENSOR_VOLTAGE_MON_12V = 10;
}

message SensorRequest {
  required mbed.rpc.Header header = 1;
  required uint32 node_id = 2;
  required SensorType sensor = 3;
}

message SensorResponse {
  required mbed.rpc.Header header = 1;
  required SensorError status = 2;
  required float value = 3;
}

// ****************************************************************************
// PDI Read Service
// ****************************************************************************

message PDIReadRequest {
  required mbed.rpc.Header header = 1;
  required uint32 node_id = 2;
  required uint32 pdi_id = 3;
}

message PDIReadResponse {
  required mbed.rpc.Header header = 1;
  required bool success = 2;
  required bytes data = 3 [ (nanopb).max_size = 512 ];
}

// ****************************************************************************
// PDI Write Service
// ****************************************************************************

message PDIWriteRequest {
  required mbed.rpc.Header header = 1;
  required uint32 node_id = 2;
  required uint32 pdi_id = 3;
  required bytes data = 4 [ (nanopb).max_size = 512 ];
}

message PDIWriteResponse {
  required mbed.rpc.Header header = 1;
  required bool success = 2;
}

// ****************************************************************************
// System Status Service
// ****************************************************************************

enum EngageState {
  ENGAGED = 0;    // Power stage engaged and outputting power
  DISENGAGED = 1; // Power stage disabled
  FAULTED = 2;    // Power stage faulted
}

message SystemStatusRequest {
  required mbed.rpc.Header header = 1;
  required uint32 node_id = 2;
}

message SystemStatusResponse {
  required mbed.rpc.Header header = 1;
  required uint32 timestamp = 2
      [ (nanopb).int_size = IS_32 ]; // System time in ms
  required EngageState output_state = 3
      [ (nanopb).int_size = IS_8 ]; // Power stage output state
  // TODO: Asserts/fault counters
}
